/*
 * Bitronix Transaction Manager
 *
 * Copyright (c) 2010, Bitronix Software.
 *
 * This copyrighted material is made available to anyone wishing to use, modify,
 * copy, or redistribute it subject to the terms and conditions of the GNU
 * Lesser General Public License, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this distribution; if not, write to:
 * Free Software Foundation, Inc.
 * 51 Franklin Street, Fifth Floor
 * Boston, MA 02110-1301 USA
 */
package bitronix.tm.resource.jdbc;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Map;

import javax.transaction.RollbackException;
import javax.transaction.SystemException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import bitronix.tm.resource.common.TransactionContextHelper;

/**
 * Disposable Connection handle.
 *
 * @author lorban, brettw
 */
public class JdbcConnectionHandle implements Connection {

    private final static Logger log = LoggerFactory.getLogger(JdbcConnectionHandle.class);

    private volatile JdbcPooledConnection jdbcPooledConnection;
    private final Connection connection;

	private boolean useStatementCache;

    public JdbcConnectionHandle(JdbcPooledConnection jdbcPooledConnection, Connection connection) {
        this.jdbcPooledConnection = jdbcPooledConnection;
        this.connection = connection;

        useStatementCache = getPooledConnection().getPoolingDataSource().getPreparedStatementCacheSize() > 0;
    }

    public JdbcPooledConnection getPooledConnection() {
        return jdbcPooledConnection;
    }

    protected Connection getConnection() throws SQLException {
        if (jdbcPooledConnection == null)
            throw new SQLException("connection is closed");
        return connection;
    }

    public Connection getDelegateUnchecked() {
        return connection;
    }

    public String toString() {
        return "a JdbcConnectionHandle of " + jdbcPooledConnection + " on " + connection;
    }

    /**
     * Enlist this connection into the current transaction if automaticEnlistingEnabled = true for this resource.
     * If no transaction is running then this method does nothing.
     * @throws SQLException thrown when an error occurs during elistment.
     */
    private void enlistResource() throws SQLException {
        if (jdbcPooledConnection == null)
            throw new SQLException("connection handle already closed");

        if (jdbcPooledConnection.getPoolingDataSource().getAutomaticEnlistingEnabled()) {
            try {
                TransactionContextHelper.enlistInCurrentTransaction(jdbcPooledConnection);
            } catch (SystemException ex) {
                throw (SQLException) new SQLException("error enlisting " + this).initCause(ex);
            } catch (RollbackException ex) {
                throw (SQLException) new SQLException("error enlisting " + this).initCause(ex);
            }
        } // if getAutomaticEnlistingEnabled
    }

    protected JdbcStatementHandle getStatementHandle(Statement statement) {
    	return new JdbcStatementHandle(statement, jdbcPooledConnection);
    }

    protected JdbcCallableStatementHandle getCallableStatementHandle(CallableStatement statement) {
    	return new JdbcCallableStatementHandle(statement, jdbcPooledConnection);
    }

    protected JdbcPreparedStatementHandle getJdbcPreparedStatementHandle(String sql) {
    	return new JdbcPreparedStatementHandle(sql);
    }

    protected JdbcPreparedStatementHandle getJdbcPreparedStatementHandle(String sql, int autoGeneratedKeys) {
    	return new JdbcPreparedStatementHandle(sql, autoGeneratedKeys);
    }

    protected JdbcPreparedStatementHandle getJdbcPreparedStatementHandle(String sql, int resultSetType, int resultSetConcurrency) {
    	return new JdbcPreparedStatementHandle(sql, resultSetType, resultSetConcurrency);
    }

    protected JdbcPreparedStatementHandle getJdbcPreparedStatementHandle(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
    	return new JdbcPreparedStatementHandle(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    protected JdbcPreparedStatementHandle getJdbcPreparedStatementHandle(String sql, int[] columnIndexes) {
    	return new JdbcPreparedStatementHandle(sql, columnIndexes);
    }

    protected JdbcPreparedStatementHandle getJdbcPreparedStatementHandle(String sql, String[] columnNames) {
    	return new JdbcPreparedStatementHandle(sql, columnNames);
    }

    protected JdbcUncachedPreparedStatementHandle getJdbcUncachedPreparedStatementHandle(PreparedStatement statement, JdbcPooledConnection pooledConnection) {
        return new JdbcUncachedPreparedStatementHandle(statement, pooledConnection);
    }

    /* Overridden methods of java.sql.Connection */

    public void close() throws SQLException {
        if (log.isDebugEnabled()) log.debug("closing " + this);

        // in case the connection has already been closed
        if (jdbcPooledConnection == null)
            return;

        jdbcPooledConnection.release();
        jdbcPooledConnection = null;
    }

    public void commit() throws SQLException {
        if (jdbcPooledConnection == null)
            throw new SQLException("connection handle already closed");
        if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())
            throw new SQLException("cannot commit a resource enlisted in a global transaction");

        getConnection().commit();
    }

    public void rollback() throws SQLException {
        if (jdbcPooledConnection == null)
            throw new SQLException("connection handle already closed");
        if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())
            throw new SQLException("cannot rollback a resource enlisted in a global transaction");

        getConnection().rollback();
    }

    public void rollback(Savepoint savepoint) throws SQLException {
        if (jdbcPooledConnection == null)
            throw new SQLException("connection handle already closed");
        if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())
            throw new SQLException("cannot rollback a resource enlisted in a global transaction");

        getConnection().rollback(savepoint);
    }

    public Savepoint setSavepoint() throws SQLException {
        if (jdbcPooledConnection == null)
            throw new SQLException("connection handle already closed");
        if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())
            throw new SQLException("cannot set a savepoint on a resource enlisted in a global transaction");

        return getConnection().setSavepoint();
    }

    public Savepoint setSavepoint(String name) throws SQLException {
        if (jdbcPooledConnection == null)
            throw new SQLException("connection handle already closed");
        if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())
            throw new SQLException("cannot set a savepoint on a resource enlisted in a global transaction");

        return getConnection().setSavepoint(name);
    }

    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        if (jdbcPooledConnection == null)
            throw new SQLException("connection handle already closed");
        if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())
            throw new SQLException("cannot release a savepoint on a resource enlisted in a global transaction");

        getConnection().releaseSavepoint(savepoint);
    }

    public boolean getAutoCommit() throws SQLException {
        if (jdbcPooledConnection == null)
            throw new SQLException("connection handle already closed");

        if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())
            return false;

        return getConnection().getAutoCommit();
    }

    public void setAutoCommit(boolean autoCommit) throws SQLException {
        if (jdbcPooledConnection == null)
            throw new SQLException("connection handle already closed");

        if (!jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())
            getConnection().setAutoCommit(autoCommit);
        else if (autoCommit)
            throw new SQLException("autocommit is not allowed on a resource enlisted in a global transaction");
    }

    public boolean isClosed() throws SQLException {
        if (jdbcPooledConnection == null)
            return true;
        return getConnection().isClosed();
    }

    public Statement createStatement() throws SQLException {
        enlistResource();

        Statement statement = getConnection().createStatement();
        jdbcPooledConnection.registerUncachedStatement(statement);
        Statement statementHandle = getStatementHandle(statement);
        return statementHandle;
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        enlistResource();

        Statement statement = getConnection().createStatement(resultSetType, resultSetConcurrency);
        jdbcPooledConnection.registerUncachedStatement(statement);
        Statement statementHandle = getStatementHandle(statement);
        return statementHandle;
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        enlistResource();

        Statement statement = getConnection().createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
        jdbcPooledConnection.registerUncachedStatement(statement);
        Statement statementHandle = getStatementHandle(statement);
        return statementHandle;
    }

    public CallableStatement prepareCall(String sql) throws SQLException {
        enlistResource();

        CallableStatement statement = getConnection().prepareCall(sql);
        jdbcPooledConnection.registerUncachedStatement(statement);
        CallableStatement statementHandle = getCallableStatementHandle(statement);
        return statementHandle;
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        enlistResource();

        CallableStatement statement = getConnection().prepareCall(sql, resultSetType, resultSetConcurrency);
        jdbcPooledConnection.registerUncachedStatement(statement);
        CallableStatement statementHandle = getCallableStatementHandle(statement);
        return statementHandle;
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        enlistResource();

        CallableStatement statement = getConnection().prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        jdbcPooledConnection.registerUncachedStatement(statement);
        CallableStatement statementHandle = getCallableStatementHandle(statement);
        return statementHandle;
    }

    /* PreparedStatement cache aware methods */

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        enlistResource();

        if (useStatementCache) {
            JdbcPreparedStatementHandle proposedStmt = getJdbcPreparedStatementHandle(sql);
            JdbcPreparedStatementHandle cachedStmt = getPooledConnection().getCachedStatement(proposedStmt);
            if (cachedStmt == null) {
                PreparedStatement stmt = getConnection().prepareStatement(sql);
                proposedStmt.setDelegate(stmt);
                cachedStmt = getPooledConnection().putCachedStatement(proposedStmt);
            }
            cachedStmt.setPooledConnection(getPooledConnection());
            return cachedStmt;
        }
        else {
            PreparedStatement stmt = getConnection().prepareStatement(sql);
            jdbcPooledConnection.registerUncachedStatement(stmt);
            JdbcUncachedPreparedStatementHandle statementHandle = getJdbcUncachedPreparedStatementHandle(stmt, jdbcPooledConnection);
            return statementHandle;
        }
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        enlistResource();

        if (useStatementCache) {
            JdbcPreparedStatementHandle proposedStmt = getJdbcPreparedStatementHandle(sql, autoGeneratedKeys);
            JdbcPreparedStatementHandle cachedStmt = getPooledConnection().getCachedStatement(proposedStmt);
            if (cachedStmt == null) {
                PreparedStatement stmt = getConnection().prepareStatement(sql, autoGeneratedKeys);
                proposedStmt.setDelegate(stmt);
                cachedStmt = getPooledConnection().putCachedStatement(proposedStmt);
            }
            cachedStmt.setPooledConnection(getPooledConnection());
            return cachedStmt;
        }
        else {
            PreparedStatement stmt = getConnection().prepareStatement(sql, autoGeneratedKeys);
            jdbcPooledConnection.registerUncachedStatement(stmt);
            JdbcUncachedPreparedStatementHandle statementHandle = getJdbcUncachedPreparedStatementHandle(stmt, jdbcPooledConnection);
            return statementHandle;
        }
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        enlistResource();

        if (useStatementCache) {
            JdbcPreparedStatementHandle proposedStmt = getJdbcPreparedStatementHandle(sql, resultSetType, resultSetConcurrency);
            JdbcPreparedStatementHandle cachedStmt = getPooledConnection().getCachedStatement(proposedStmt);
            if (cachedStmt == null) {
                PreparedStatement stmt = getConnection().prepareStatement(sql, resultSetType, resultSetConcurrency);
                proposedStmt.setDelegate(stmt);
                cachedStmt = getPooledConnection().putCachedStatement(proposedStmt);
            }
            cachedStmt.setPooledConnection(getPooledConnection());
            return cachedStmt;
        }
        else {
            PreparedStatement stmt = getConnection().prepareStatement(sql, resultSetType, resultSetConcurrency);
            jdbcPooledConnection.registerUncachedStatement(stmt);
            JdbcUncachedPreparedStatementHandle statementHandle = getJdbcUncachedPreparedStatementHandle(stmt, jdbcPooledConnection);
            return statementHandle;
        }
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        enlistResource();

        if (useStatementCache) {
            JdbcPreparedStatementHandle proposedStmt = getJdbcPreparedStatementHandle(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
            JdbcPreparedStatementHandle cachedStmt = getPooledConnection().getCachedStatement(proposedStmt);
            if (cachedStmt == null) {
                PreparedStatement stmt = getConnection().prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
                proposedStmt.setDelegate(stmt);
                cachedStmt = getPooledConnection().putCachedStatement(proposedStmt);
            }
            cachedStmt.setPooledConnection(getPooledConnection());
            return cachedStmt;
        }
        else {
            PreparedStatement stmt = getConnection().prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
            jdbcPooledConnection.registerUncachedStatement(stmt);
            JdbcUncachedPreparedStatementHandle statementHandle = getJdbcUncachedPreparedStatementHandle(stmt, jdbcPooledConnection);
            return statementHandle;
        }
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        enlistResource();

        if (useStatementCache) {
            JdbcPreparedStatementHandle proposedStmt = getJdbcPreparedStatementHandle(sql, columnIndexes);
            JdbcPreparedStatementHandle cachedStmt = getPooledConnection().getCachedStatement(proposedStmt);
            if (cachedStmt == null) {
                PreparedStatement stmt = getConnection().prepareStatement(sql, columnIndexes);
                proposedStmt.setDelegate(stmt);
                cachedStmt = getPooledConnection().putCachedStatement(proposedStmt);
            }
            cachedStmt.setPooledConnection(getPooledConnection());
            return cachedStmt;
        }
        else {
            PreparedStatement stmt = getConnection().prepareStatement(sql, columnIndexes);
            jdbcPooledConnection.registerUncachedStatement(stmt);
            JdbcUncachedPreparedStatementHandle statementHandle = getJdbcUncachedPreparedStatementHandle(stmt, jdbcPooledConnection);
            return statementHandle;
        }
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        enlistResource();

        if (useStatementCache) {
            JdbcPreparedStatementHandle proposedStmt = getJdbcPreparedStatementHandle(sql, columnNames);
            JdbcPreparedStatementHandle cachedStmt = getPooledConnection().getCachedStatement(proposedStmt);
            if (cachedStmt == null) {
                PreparedStatement stmt = getConnection().prepareStatement(sql, columnNames);
                proposedStmt.setDelegate(stmt);
                cachedStmt = getPooledConnection().putCachedStatement(proposedStmt);
            }
            cachedStmt.setPooledConnection(getPooledConnection());
            return cachedStmt;
        }
        else {
            PreparedStatement stmt = getConnection().prepareStatement(sql, columnNames);
            jdbcPooledConnection.registerUncachedStatement(stmt);
            JdbcUncachedPreparedStatementHandle statementHandle = getJdbcUncachedPreparedStatementHandle(stmt, jdbcPooledConnection);
            return statementHandle;
        }
    }

    /* Delegated methods */

	public String nativeSQL(String sql) throws SQLException {
		return connection.nativeSQL(sql);
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		return connection.getMetaData();
	}

	public void setReadOnly(boolean readOnly) throws SQLException {
		connection.setReadOnly(readOnly);
	}

	public boolean isReadOnly() throws SQLException {
		return connection.isReadOnly();
	}

	public void setCatalog(String catalog) throws SQLException {
		connection.setCatalog(catalog);
	}

	public String getCatalog() throws SQLException {
		return connection.getCatalog();
	}

	public void setTransactionIsolation(int level) throws SQLException {
		connection.setTransactionIsolation(level);
	}

	public int getTransactionIsolation() throws SQLException {
		return connection.getTransactionIsolation();
	}

	public SQLWarning getWarnings() throws SQLException {
		return connection.getWarnings();
	}

	public void clearWarnings() throws SQLException {
		connection.clearWarnings();
	}

	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return connection.getTypeMap();
	}

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		connection.setTypeMap(map);
	}

	public void setHoldability(int holdability) throws SQLException {
		connection.setHoldability(holdability);
	}

	public int getHoldability() throws SQLException {
		return connection.getHoldability();
	}
}
